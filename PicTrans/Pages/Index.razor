@page "/"
@inject ISecureStorage secureStorage
@inject IImageService imageService

<MudContainer>
    <h1 class="text-uppercase text-center">Convert Images</h1>
    <MudGrid>
        <MudItem xs="12" Class="text-center">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept="images/*">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="MudBlazor.Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               Class="w-100"
                               for="@context">
                        Multiple Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            <MudButtonGroup Class="mt-2">
                <MudButton Class="@GetButtonClass(true)" OnClick="@(() => isDownloadFolder = true)">Download Folder</MudButton>
                <MudButton Class="@GetButtonClass(false)" OnClick="@(() => isDownloadFolder = false)">Picture Folder</MudButton>
            </MudButtonGroup>
            <MudSelect Label="Convert to:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
                @foreach (var e in pictureExtensions)
                {
                    <MudSelectItem Value="@e">@e</MudSelectItem>
                }
            </MudSelect>
            @if (isConverted is false)
            {
                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="mt-2" OnClick="ConvertImages">
                    Convert
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" Class="mt-2" OnClick="DownloadImages">
                    Download
                </MudButton>
            }
        </MudItem>
        <MudItem xs="12">
            <MudVirtualize Items="files" Context="f" OverscanCount="10">
                <FileComponent File="f" IsDownloadFolder="isDownloadFolder"/>
            </MudVirtualize>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private long maxFileSize = 1024 * 1024 * 50; // represents 50MB
    private string selectedExtension = ".png";
    private string errorMessage = "";
    private bool isDownloadFolder = true;
    private bool isConverted = false;
    private List<IBrowserFile> files = new();
    private List<MemoryStream> convertedImages = new();
    private List<string> pictureExtensions = new();

    protected override async Task OnInitializedAsync()
    {
        pictureExtensions = imageService.GetPictureFormats();
        await LoadStates();
    }

    private async Task LoadStates()
    {
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? ".png";
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            this.files.Add(file);
        }
    }

    private async Task ConvertImages()
    {
        try
        {
            if (files.Count == 0)
            {
                return;
            }

            convertedImages.Clear();

            foreach (var file in files)
            {
                using (var stream = file.OpenReadStream(maxFileSize))
                using (var image = await Image.LoadAsync(stream))
                using (var convertedStream = new MemoryStream())
                {
                    await imageService.GetEncoderAsync(image, convertedStream, selectedExtension);
                    convertedStream.Position = 0;

                    convertedImages.Add(new MemoryStream(convertedStream.ToArray()));
                }
            }

            await SaveStates();
            isConverted = true;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DownloadImages()
    {
        try
        {
            if (convertedImages.Count == 0 || files.Count == 0)
            {
                return;
            }

            for (int i = 0; i < files.Count; i++)
            {
                var file = files[i];
                var convertedImage = convertedImages[i];

                string filePath = "";
                if (isDownloadFolder)
                {
                    filePath = imageService.GetDefaultDownloadPath(file, selectedExtension);
                }
                else
                {
                    filePath = imageService.GetPicturesDownloadPath(file, selectedExtension);
                }

                using (var outputStream = new FileStream(filePath, FileMode.Create))
                {
                    await convertedImage.CopyToAsync(outputStream);
                }
            }

            isConverted = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private string GetButtonClass(bool isDownload)
    {
        if (isDownloadFolder == isDownload)
        {
            return "text-success";
        }

        return "text-danger";
    }
}