@page "/"
@inject ISecureStorage secureStorage
@inject IImageService imageService
@inject IDefaultDataService defaultDataService
@inject IDialogService dialogService

<MudContainer>
    <h1 class="text-uppercase text-center">
        Convert Images
        <MudIcon Icon="@Icons.Material.Filled.Home" Title="Home"/>
    </h1>
    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <MudAlert Severity="@((Severity)Enum.Parse(typeof(Severity), alertClass))">
            @errorMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" Class="text-center">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" 
                Accept=".png,.jpeg.,.jpg,.gif,.bmp,.tiff,.webp;">
                <ButtonTemplate>
                    <MudButton 
                        HtmlTag="label"
                        Variant="Variant.Filled"
                        Color="MudBlazor.Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload"
                        Class="w-100"
                        for="@context">
                        Multiple Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            <MudButtonGroup Class="mt-2">
                @foreach (var p in folderPaths)
                {
                    <MudButton Class="@GetButtonClass(p)"
                               OnClick="(() => selectedPath = p)">
                        @p
                    </MudButton>
                }
            </MudButtonGroup>
            <MudSelect Label="Convert to:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
                @foreach (var e in pictureExtensions)
                {
                    <MudSelectItem Value="@e">@e</MudSelectItem>
                }
            </MudSelect>
            <MudText 
                Align="Align.Center" 
                Class="mt-2">
                @progress.ToString("0")%
            </MudText>
            <MudProgressLinear 
                Color="MudBlazor.Color.Primary" 
                Buffer="true" 
                Value="@progress" 
                BufferValue="@bufferValue" 
                Class="my-7" 
                Max="100"/>
            <MudAutocomplete T="string" Label="Search" 
                Variant="Variant.Outlined" 
                @bind-Value="searchText" 
                SearchFunc="SearchImage"
                AdornmentIcon="@Icons.Material.Filled.Search" 
                AdornmentColor="MudBlazor.Color.Primary"
                OnAdornmentClick="FilterImages"
                ResetValueOnEmptyText="true"/>
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <MudText Align="Align.Start" Class="mt-2">@GetFilesCount()</MudText>
                    <MudSwitch @bind-Checked="isCompressedOption" Label="Compress Images" Color="MudBlazor.Color.Primary" />
                    @if (isCompressedOption)
                    {
                        <MudNumericField @bind-Value="maxWidth"
                            Label="Max Width"
                            Variant="Variant.Text"
                            Min="1"
                            Max="6000"
                            Required="true"/>
                        <MudNumericField @bind-Value="maxHeight"
                            Label="Max Height"
                            Variant="Variant.Text"
                            Min="1"
                            Max="5000"
                            Required="true"/>
                    }
                </div>
                <div></div> <!-- Add an empty div to create spaces -->
                <div class="center-children">
                    <MudButtonGroup Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" OverrideStyles="false" Class="mt-2">
                        @if (files.Count > 0)
                        {
                            <MudButton 
                                Variant="Variant.Outlined" 
                                Color="MudBlazor.Color.Primary" 
                                OnClick="ConvertAndDownloadImage">
                                Convert And Download
                            </MudButton>
                        }
                        @if (files.Count > 0)
                        {
                            <MudButton 
                                Variant="Variant.Outlined" 
                                Color="MudBlazor.Color.Error" 
                                OnClick="ClearImages">
                                Clear
                            </MudButton>
                        }
                    </MudButtonGroup>
                </div>
                <div></div> <!-- Add an empty div to create spaces -->
                <div></div> <!-- Add an empty div to create spaces -->
                <div></div> <!-- Add an empty div to create spaces -->
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudVirtualize Items="files" Context="f" OverscanCount="10">
                <ImageFile 
                    BrowserFile="f" 
                    SelectedPath="@selectedPath" 
                    OnRemoveImage="RemoveImageFile"/>
            </MudVirtualize>
        </MudItem>
    </MudGrid>
</MudContainer>


