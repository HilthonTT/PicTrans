@page "/"

<h1 class="text-center text-uppercase mb-2">Convert your file into a different extension.</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="row">
    <div class="col-10">
        <div class="btn-group">
            <button class="btn btn-primary" @onclick="(() => isDownloadFolder = true)">Download folder</button>
            <button class="btn btn-secondary" @onclick="(() => isDownloadFolder = false)">Picture folder</button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-10 col-md-8">
        <div class="row">
            <InputFile OnChange="LoadFile" class="form-control"/>
            @if (file is not null)
            {
                <button class="btn btn-primary" @onclick="ConvertImage">Convert File</button>
            }
        </div>
        <div class="row">
            @if (convertedImage is not null)
            {
                <button class="btn btn-primary" @onclick="DownloadImage">Download</button>
            }
        </div>
    </div>
</div>

@code {
    private long maxFileSize = 1024 * 1024 * 5; // represents 5MB
    private IBrowserFile file;
    private MemoryStream convertedImage;
    private string selectedExtension = "";
    private string errorMessage = "";
    private bool isDownloadFolder = true;
    private List<string> pictureExtensions = new()
    {
        ".jpg",
        ".jpeg",
        ".png",
        ".gif",
        ".bmp",
        ".tiff",
        ".tif",
        ".ico",
        ".webp"
    };

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task ConvertImage()
    {
        if (file is null)
        {
            return;
        }

        using (var stream = file.OpenReadStream(maxFileSize))
        using (var image = await Image.LoadAsync(stream))
        {
            using (var convertedStream = new MemoryStream())
            {
                await image.SaveAsync(convertedStream, new PngEncoder());
                convertedStream.Position = 0;

                // Store the converted image
                convertedImage = new MemoryStream(convertedStream.ToArray());
            }
        }
    }

    private async Task DownloadImage()
    {
        if (convertedImage is null)
        {
            return;
        }

        try
        {
            string filePath = isDownloadFolder ? GetDefaultDownloadPath() : GetPicturesDownloadPath();

            using (var outputStream = new FileStream(filePath, FileMode.Create))
            {
                await convertedImage.CopyToAsync(outputStream);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private string GetDefaultDownloadPath()
    {
        string downloadsFolder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        string fileName = $"{file.Name}.png";
        return Path.Combine(downloadsFolder, "Downloads", fileName);
    }

    private string GetPicturesDownloadPath()
    {
        string downloadsFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
        string fileName = $"{file.Name}.png";
        return Path.Combine(downloadsFolder, fileName);
    }
}