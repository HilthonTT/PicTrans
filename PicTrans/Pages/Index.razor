@page "/"
@inject ISecureStorage secureStorage
@inject IImageService imageService
@inject IDefaultDataService defaultDataService
@inject IDialogService dialogService

<MudContainer>
    <h1 class="text-uppercase text-center">
        Convert Images
        <MudIcon Icon="@Icons.Material.Filled.Home" Title="Home"/>
    </h1>
    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <MudAlert Severity="@((Severity)Enum.Parse(typeof(Severity), alertClass))">
            @errorMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" Class="text-center">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" 
                Accept=".png;.jpeg.;.jpg;.gif;.bmp;.tiff;.webp;">
                <ButtonTemplate>
                    <MudButton 
                        HtmlTag="label"
                        Variant="Variant.Filled"
                        Color="MudBlazor.Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload"
                        Class="w-100"
                        for="@context">
                        Multiple Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            <MudButtonGroup Class="mt-2">
                @foreach (var p in folderPaths)
                {
                    <MudButton Class="@GetButtonClass(p)"
                               OnClick="(() => selectedPath = p)">
                        @p
                    </MudButton>
                }
            </MudButtonGroup>
            <MudSelect Label="Convert to:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
                @foreach (var e in pictureExtensions)
                {
                    <MudSelectItem Value="@e">@e</MudSelectItem>
                }
            </MudSelect>
            <MudText 
                Align="Align.Center" 
                Class="mt-2">
                @progress.ToString("0")%
            </MudText>
            <MudProgressLinear 
                Color="MudBlazor.Color.Primary" 
                Buffer="true" 
                Value="progress" 
                BufferValue="bufferValue" 
                Class="my-7" />
            <MudAutocomplete T="string" Label="Search" 
                Variant="Variant.Outlined" 
                @bind-Value="searchText" 
                SearchFunc="SearchImage"
                AdornmentIcon="@Icons.Material.Filled.Search" 
                AdornmentColor="MudBlazor.Color.Primary"
                OnAdornmentClick="FilterImages"
                ResetValueOnEmptyText="true"/>
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <MudText Align="Align.Start" Class="mt-2">@GetFilesCount()</MudText>
                    <MudSwitch @bind-Checked="isCompressedOption" Label="Compress Images" Color="MudBlazor.Color.Primary" />
                    @if (isCompressedOption)
                    {
                        <MudNumericField @bind-Value="maxWidth"
                            Label="Max Width"
                            Variant="Variant.Text"
                            Min="1"
                            Max="6000"
                            Required="true"/>
                        <MudNumericField @bind-Value="maxHeight"
                            Label="Max Height"
                            Variant="Variant.Text"
                            Min="1"
                            Max="5000"
                            Required="true"/>
                    }
                </div>
                <div></div> <!-- Add an empty div to create spaces -->
                <div class="center-children">
                    <MudButtonGroup Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" OverrideStyles="false" Class="mt-2">
                        @if (isConverted is false)
                        {
                            <MudButton 
                                Variant="Variant.Outlined" 
                                Color="MudBlazor.Color.Primary" 
                                OnClick="ConvertImages">
                                Convert
                            </MudButton>
                        }
                        else
                        {
                            <MudButton 
                                Variant="Variant.Outlined" 
                                Color="MudBlazor.Color.Primary" 
                                OnClick="DownloadImages">
                                Download
                            </MudButton>
                        }
                        @if (files.Count > 0)
                        {
                            <MudButton 
                                Variant="Variant.Outlined" 
                                Color="MudBlazor.Color.Error" 
                                OnClick="ClearImages">
                                Clear
                            </MudButton>
                        }
                    </MudButtonGroup>
                </div>
                <div></div> <!-- Add an empty div to create spaces -->
                <div></div> <!-- Add an empty div to create spaces -->
                <div></div> <!-- Add an empty div to create spaces -->
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudVirtualize Items="files" Context="f" OverscanCount="10">
                <ImageFile 
                    BrowserFile="f" 
                    SelectedPath="@selectedPath"/>
            </MudVirtualize>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private const string DefaultFolder = "Download Folder";
    private const string DefaultExtension = ".png";

    private IDialogReference dialogReference;
    private string searchText = "";
    private string selectedExtension = DefaultExtension;
    private string selectedPath = DefaultFolder;
    private string errorMessage = "";
    private string alertClass = "";
    private int loadedFilesCount = 0;
    private int maxWidth = 800;
    private int maxHeight = 800;
    private double progress = 0;
    private double bufferValue = 0;
    private bool isConverted = false;
    private bool isCompressedOption = false;
    private List<IBrowserFile> files = new();
    private List<IBrowserFile> initialFiles = new();
    private List<MemoryStream> convertedImages = new();
    private List<string> pictureExtensions = new();
    private List<string> folderPaths = new();

    protected override async Task OnInitializedAsync()
    {
        pictureExtensions = defaultDataService.GetPictureFormats();
        folderPaths = defaultDataService.GetFolderPaths();
        await LoadStates();
    }

    private async Task LoadStates()
    {
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
        searchText = await secureStorage.GetAsync(nameof(searchText)) ?? "";
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultFolder;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        if (string.IsNullOrWhiteSpace(searchText))
        {
            secureStorage.Remove(nameof(searchText)); 
        }
        else
        {
            await secureStorage.SetAsync(nameof(searchText), searchText);
        }
    }

    private async Task FilterImages()
    {
        var output = initialFiles;

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(f => f.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        files = output;
        await SaveStates();
    }

    private async Task<IEnumerable<string>> SearchImage(string value)
    {
        searchText = value;
        var output = initialFiles;
        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(f => f.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        await SaveStates();
        return output.Select(f => f.Name);
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        isConverted = false;
        foreach (var f in files)
        {
            this.files.Add(f);
            loadedFilesCount = this.files.Count;
            CalculateProgress();
        }

        initialFiles = this.files;
    }

    private async Task ConvertImages()
    {
        try
        {
            errorMessage = "";
            if (files.Count == 0)
            {
                GetAlertSeverity("Warning");
                errorMessage = "No files to convert.";
                return;
            }

            convertedImages.Clear();

            foreach (var file in files)
            {
                await imageService.ConvertImageAsync(file, selectedExtension, convertedImages);
            }

            await SaveStates();
            isConverted = true;
            OpenDialog($"Successfully converted your files to {selectedExtension}");
        }
        catch (Exception ex)
        {
            GetAlertSeverity("Error");
            errorMessage = ex.Message;
        }
    }

    private async Task DownloadImages()
    {
        try
        {
            errorMessage = "";
            if (convertedImages.Count == 0 || files.Count == 0)
            {
                GetAlertSeverity("Warning");
                errorMessage = "No converted files to download.";
                return;
            }

            if (isCompressedOption)
            {
                await ProcessImagesAsync(CompressAndDownloadImageAsync);
            }
            else
            {
                await ProcessImagesAsync(DownloadImageAsync);
            }

            isConverted = false;
            OpenDialog($"Downloaded to {selectedPath}.");
        }
        catch (Exception ex)
        {
            GetAlertSeverity("Error");
            errorMessage = ex.Message;
        }
    }

    private async Task ProcessImagesAsync(Func<IBrowserFile, MemoryStream, string, string, Task> imageProcessingFunc)
    {
        for (int i = 0; i < files.Count; i++)
        {
            var file = files[i];
            var convertedImage = convertedImages[i];

            await imageProcessingFunc(file, convertedImage, selectedPath, selectedExtension);
        }
    }

    private async Task CompressAndDownloadImageAsync(IBrowserFile file, 
        MemoryStream convertedImage, 
        string selectedPath, 
        string selectedExtension)
    {
        await imageService.CompressImageAndDownloadAsync(file, selectedPath, selectedExtension, maxWidth, maxHeight);
    }

    private async Task DownloadImageAsync(IBrowserFile file, 
        MemoryStream convertedImage, 
        string selectedPath, 
        string selectedExtension)
    {
        await imageService.DownloadFileAsync(file, convertedImage, selectedPath, selectedExtension);
    }


    private string GetButtonClass(string path)
    {
        if (selectedPath == path)
        {
            return "text-success";
        }

        return "text-danger";
    }

    private void GetAlertSeverity(string alert)
    {
        string output = alert switch
        {
            "Normal" => "Severity.Normal",
            "Info" => "Severity.Info",
            "Success" => "Severity.Success",
            "Warning" => "Severity.Warning",
            "Error" => "Severity.Error",
            _ => "Severity.Info",
        };

        alertClass = alert;
    }

    private string GetFilesCount()
    {
        string output = files?.Count switch
        {
            0 => "0 files",
            1 => "1 file",
            _ => $"{files?.Count} files",
        };

        return output;
    }

    private void ClearImages()
    {
        files.Clear();
        initialFiles.Clear();
        convertedImages.Clear();
        CalculateProgress();
        loadedFilesCount = 0;
        isConverted = false;
    }

    private void CalculateProgress()
    {
        int totalLoadedFiles = files.Count;
        if (files.Count == 0)
        {
            progress = 0;
            bufferValue = 0;
        }
        else
        {
            double progress = (double)loadedFilesCount / totalLoadedFiles * 100;
            double bufferValue = progress + 5;
            this.progress = progress;
            this.bufferValue = bufferValue;
        }
    }

    private void OpenDialog(string title)
    {
        var topCenter = new DialogOptions() { Position = DialogPosition.TopCenter, ClassBackground = "backdrop-blur" };
        dialogReference = dialogService.Show<Dialog>(title, topCenter);
    }
}