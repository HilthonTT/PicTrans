@inject IImageService imageService
@inject IDefaultDataService defaultDataService

<MudCard Class="mb-3">
    <MudCardHeader>
        <CardHeaderAvatar>
            @if (string.IsNullOrWhiteSpace(sourcePath))
            {
                <MudAvatar Color="MudBlazor.Color.Secondary">@BrowserFile.Name.First()</MudAvatar>
            }
            else
            {
                <MudAvatar>
                    <MudImage Src="@sourcePath"></MudImage>
                </MudAvatar>
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@BrowserFile.Name</MudText>
            <MudText Typo="Typo.body2">Size: @BrowserFile.Size bytes</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="MudBlazor.Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    @if (string.IsNullOrWhiteSpace(sourcePath))
    {
        <MudCardMedia Image="images/pilars.jpg" Height="250" />
    }
    else
    {
        <MudCardMedia Image="@sourcePath" Height="250" />
    }
    <MudCardContent>
        <MudText Typo="Typo.body2">Last modified @BrowserFile.LastModified</MudText>
    </MudCardContent>
    <div class="p-2">
        <MudSelect Label="Convert to:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
            @foreach (var e in pictureExtensions)
            {
                <MudSelectItem Value="@e">@e</MudSelectItem>
            }
        </MudSelect>
    </div>
    <MudCardActions>
        @if (isConverted)
        {
            <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Secondary" OnClick="DownloadImage">
                Download
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Primary" OnClick="ConvertImage">
                Convert
            </MudButton>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public IBrowserFile BrowserFile { get; set; }

    [Parameter]
    [EditorRequired]
    public string SelectedPath { get; set; }

    private string selectedExtension = ".png";
    private string sourcePath = "";
    private bool isConverted = false;
    private MemoryStream convertedFile;
    private List<string> pictureExtensions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadThumbnailFile();
        pictureExtensions = defaultDataService.GetPictureFormats();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadThumbnailFile();
    }

    private async Task LoadThumbnailFile()
    {
        sourcePath = await imageService.LoadImageFileAsync(BrowserFile);
    }

    private async Task ConvertImage()
    {
        await imageService.ConvertImageAsync(BrowserFile, selectedExtension);
        isConverted = true;
    }

    private async Task DownloadImage()
    {
        string filePath = imageService.GetFilePath(BrowserFile, SelectedPath, selectedExtension);
        using (var outputStream = new FileStream(filePath, FileMode.Create))
        {
            await convertedFile.CopyToAsync(outputStream);
        }

        isConverted = false;
    }
}
